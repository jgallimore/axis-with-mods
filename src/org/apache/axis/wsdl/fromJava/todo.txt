This is a todo list for Java2WSDL stuff
---------------------------------------
Initial Version: Ravi Kumar(rkumar@borland.com) - Dec 2, 2001


Group 1
-------
* Generate deployment - deploy.wsdd, undeploy.wsdd
* Pluggable ParameterNameResolver for method parameters with complexType
  -Rich: Users can now use Java2WSDLFactory to provide this mapping.
  -Rich: If the class was compiled with -g, the parameter names are 
         obtained from the javap output and used as the message part names.
         Users can provide their own mapping by extending the Java2WSDLFactory.
* Make PackageName=Namespace configurable using a properties file
* Generate JAX-RPC style stub, skeleton and optionally refactor exporting 
  class as the impl class *** (see Note 1) ***
* Need to generate <fault> information.

Group 2
-------
* samples
  - Rich: I added samples/userguide/example6
* User documentation
  - Rich: I have user-guide.html doc for example6 in my sandbox
* Internationalization
  - Rich: Done


Group 3
-------
* Address roundtrip behaviour - with the exception of type promotion
   - this has been started see test/sequence

* A mechanism to register types (class:serializer:deserializer)


Group 4
-------
* Support method overloading
  -Rich: Added a default overloading resolution mechanism.  Users can provide
         their own using new Java2WSDLFactory mechanism.
* support exporting by interface - in addition to allowed methods
  -Rich: Users can provide their own resolution using Java2WSDLFactory mechanism.
  -Rich: Seems like we have enough bells and whistles here.
* Output mode currently has ALL, Interface, Implementation -- need to add Types
* Output and OUTPUT_IMPL options are there to generate "split" files -- need to 
  add OUTPUT_TYPES as well 
  -Rich: Might want to think about a separate "split WSDL tool" to do this stuff.
* Allow options for just for Java->XML type generation


Group 5
-------
* Style/use support: rpc/encoded, document/literal, rpc/literal and document/encoded
* Switch the runtime WSDL generation to use Java2WSDL
   - Rich: Done.  But someone may want to add ability to get interface/implementation wsdl.



********************************************************************************
NOTES:
Use this place to clarify features if they are not immediately obvious

 
Note 1: Generate JAX-RPC style classes
--------------------------------------
Java2WSDL needs to satisfy the following scenarios
1. Export a class as a Web service 
        no wsdl is required, just the deploy.wsdd and undeploy.wsdd
2. Export a class and generate WSD
        get both WSDL and deploy.wsdd, undeploy.wsdd
3. Export a class and generate WSDL and JAX-RPC compliant stubs
        same as above plus client stub code --- Most typical need
4. Export a class and generate WSDL and JAX-RPC compliant stubs and skeletons
        same as above plus skeleton and impl classes, optionally refactoring 
        the exporting class to be an impl class
Basically IN ONE STEP, ALL code, wsdl and deployment generation for any of the 
above scenarios. 
Note, the functionality will be achieved y calling into Wsdl2Java as appropriate
